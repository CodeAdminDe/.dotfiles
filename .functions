############ GitLab ############
function gl-close-issues () {
    if [ "$#" -lt 5 ]; then
        echo "Usage: gl-close-issues gitlabFqdn (string) projectId (int) personalAccessToken (string) assignSelf (bool true|false) issueId1 (int) issueId2 (int) ..."
        echo "Sample: gl-close-issues git.example.com glt-1234567890 true 12 13 14"
        return 1
    fi

    local gitlabFqdn="$1"
    local projectId="$2"
    local personalAccessToken="$3"
    local assignSelf="$4"
    local userId=""

    if [[ "$assignSelf" == "true" ]]; then
        userId=$(curl -s -H "PRIVATE-TOKEN: $personalAccessToken" "https://$gitlabFqdn/api/v4/user" | jq -r '.id')
        if [ -z "$userId" ]; then
            echo "Err: Did not receive user id. Auth issue?"
            return 1
        fi
    fi

    for issueId in "${@:5}"; do
        if [[ "$assignSelf" == "true" ]]; then
            curl -X PUT "https://$gitlabFqdn/api/v4/projects/$projectId/issues/$issueId" -H "PRIVATE-TOKEN: $personalAccessToken" -d "state_event=close&assignee_id=$userId"
        else
            curl -X PUT "https://$gitlabFqdn/api/v4/projects/$projectId/issues/$issueId" -H "PRIVATE-TOKEN: $personalAccessToken" -d "state_event=close"
        fi
    done
}

############ WSL ############

function wsl-mount-netdev () {
  sudo whoami 1>/dev/null && {
    if [[ "$1" =~ ^[A-Za-z]$ ]]; then
      dUpper=$(echo $1 | tr '[:lower:]' '[:upper:]')
      dLower=$(echo $1 | tr '[:upper:]' '[:lower:]')
      if [[ $dLower == "c" ]] then echo "You won't mount C: .. trust me! ;-)" && return; fi

      echo "Mounting $dUpper to /mnt/$dLower ..."
      if [[ ! -d "/mnt/$dLower" ]]; then
        sudo mkdir /mnt/$dLower
        sudo mount -t drvfs $dUpper: /mnt/$dLower
        echo "Mounted $dUpper to /mnt/$dLower"
      else
        echo "Err: /mnt/$dLower already exists. Can not process mounting. Abort."
      fi
    else
      echo "Err: Please provide the network device letter (1 character) that you want to mount (A-Z or a-z)."
    fi
    sudo -k
  }
}

function wsl-umount-netdev () {
  sudo whoami 1>/dev/null && {
    if [[ "$1" =~ ^[A-Za-z]$ ]]; then
      dUpper=$(echo $1 | tr '[:lower:]' '[:upper:]')
      dLower=$(echo $1 | tr '[:upper:]' '[:lower:]')
      if [[ $dLower == "c" ]] then echo "You won't unmount C: .. trust me! ;-)" && return; fi

      echo "Unmounting $dUpper of /mnt/$dLower ..."
      if [[ $(sudo mount | grep /mnt/$dLower) != "" ]]; then
        sudo umount /mnt/$dLower
        echo "Unmounted $dUpper of /mnt/$dLower"
        sudo rm -d -i /mnt/$dLower
      else
        echo "Err: /mnt/$dLower is not mounted at all. Can not process umount. Abort."
      fi
    else
      echo "Err: Please provide the network device letter (1 character) that you want to mount (A-Z or a-z)."
    fi
    sudo -k
  }
}


############ Common ############

function schedule () {
    while [ TRUE ] 
    do
        sail artisan schedule:run
        echo "sleep 60 secs..."
        sleep 60
    done
}

function sublist () {
    docker run --rm -t hypnza/sublist3r -d "$1"
}

function zap () {
    docker run -i owasp/zap2docker-stable zap-cli quick-scan --self-contained --start-options '-config api.disablekey=true' "$1"
}

# checkdmarc <args> // https://domainaware.github.io/checkdmarc/index.html
function checkdmarc() {
docker build -t ca/checkdmarc - <<EOF
    FROM pypy:latest

    RUN apt-get update && \
        apt-get install -y python3-pip && \
        pip3 install checkdmarc

    ENTRYPOINT ["checkdmarc"]
EOF
    docker run --rm -t ca/checkdmarc "$1"
}

# fingerprint sha1|sha256|sha512 cert.pem
function fingerprint () {
    openssl x509 -noout -fingerprint -$1 -inform pem -in $2
}

# showcert domain.tld
function showcert () {
    echo | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null | openssl x509 -inform pem -noout -text
}

# showcert-dates domain.tld
function showcert-dates () {
    echo | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null | openssl x509 -inform pem -noout -dates
}

# check-namservers <expected nameserver explicit or base> <domain1.tld> <domain2.tld> ...
# Returns a markdown formatted result
function check-nameservers() {
    if [ "$#" -lt 2 ]; then
        echo "Usage: check_nameservers <expected namserver> <domain1> [<domain2> ...]"
        echo "Samples: "
        echo "         check_nameservers inwx. codeadmin.de it-habich.de"
        echo "         check_nameservers ns.inwx.de codeadmin.de"
        echo "         check_nameservers ns.inwx.de codeadmin.de"
        echo '         check-nameservers inwx.de $(cat domains.csv)'
        return 1
    fi

    expectedNs="$1"
    shift
    
    { echo -e "| Domain | Nameserver | Expected NS |\n|--------|------------|-------|"; 
    for domain in "$@"; do
        nslookup -type=ns "$domain" 8.8.8.8 | awk -F'= ' -v dom="$domain" -v expectednsyn="$expectedNs" '/nameserver/{valid=($2 ~ expectednsyn) ? "Yes" : "No"; print "| " dom " | " $2 " | " valid " |"}'
    done; }
}

# pfx2cer mycrtandpriv.pfx mycert.cer
function pfx2cer () {
    openssl pkcs12 -in $1 -clcerts -nokeys -out $2
}

# pfx2key mycrtandpriv.pfx myprivkey.key
function pfx2key () {
    openssl pkcs12 -in $1 -nocerts -out $2
}

# rempass myprivkey.key myprivkey.pem
function rempass () {
    openssl rsa -in $1 -out $2
}

function swagger-editor () {
    docker run --rm -p "$1":8080 swaggerapi/swagger-editor
}

function code-install-extensions () {
   cat $HOME/.dotfiles/.vscode-extensions | xargs -L 1 code --install-extension
}

function krew-install () {
    (
      set -x; cd "$(mktemp -d)" &&
      OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
      ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
      KREW="krew-${OS}_${ARCH}" &&
      curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
      tar zxvf "${KREW}.tar.gz" &&
      ./"${KREW}" install krew
    )
}
